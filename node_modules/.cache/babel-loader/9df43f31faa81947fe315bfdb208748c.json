{"ast":null,"code":"var _jsxFileName = \"/Users/hannahkofkin/Development/code/mod-5-project/front-end/src/components/Recipe-Detail-Page/EditRecipe.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nexport default function EditRecipe(props) {\n  // console.log(props)\n  const [editRecipeForm, setEditRecipeForm] = useState(false);\n  const [state, setState] = useState({\n    title: \"\",\n    ingredients: [{\n      id: '',\n      ingred_detail: ''\n    }],\n    recipe_steps: [{\n      id: '',\n      step_detail: ''\n    }]\n  });\n  const [ingredientState, setIngredientState] = useState([{\n    id: '',\n    ingred_detail: ''\n  }]);\n  const [recipeStepState, setRecipeStepState] = useState([{\n    id: '',\n    step_detail: ''\n  }]);\n  useEffect(() => {\n    // console.log(props.recipeObj)\n    if (props.recipeObj) {\n      setState({\n        // image: props.recipeObj.image,\n        // video: props.recipeObj.video,\n        title: props.recipeObj.title,\n        ingredients: props.recipeObj.ingredients,\n        recipe_steps: props.recipeObj.recipe_steps\n      });\n    }\n  }, []); // console.log(state)\n\n  const displayFormHandler = () => {\n    setEditRecipeForm(prevState => {\n      return !prevState;\n    });\n  };\n\n  const changeHandler = e => {\n    e.persist();\n    setState(prevState => ({ ...prevState,\n      [e.target.name]: e.target.value\n    })); // console.log(state);\n  };\n\n  const changeHandlerFiles = e => {\n    e.persist();\n    setState(prevState => ({ ...prevState,\n      [e.target.name]: e.target.files[0]\n    })); // console.log(state);\n  };\n\n  const handleIngredientChange = (index, e) => {\n    e.persist();\n    let active_ingred_id = state.ingredients[index].id;\n    const values = [...ingredientState];\n    values[index].id = active_ingred_id;\n    values[index].ingred_detail = e.target.value;\n    setIngredientState(values);\n    setState(prevState => ({ ...prevState,\n      ingredients: prevState.ingredients.map(ingredient => {\n        if (active_ingred_id === ingredient.id) {\n          return {\n            id: ingredient.id,\n            ingred_detail: e.target.value\n          };\n        }\n\n        return ingredient;\n      })\n    }));\n  };\n\n  const handleRecipeStepChange = (index, e) => {\n    e.persist();\n    let active_step_id = state.recipe_steps[index].id;\n    const values = [...recipeStepState];\n    values[index].id = active_step_id;\n    values[index].step_detail = e.target.value;\n    setRecipeStepState(values);\n    setState(prevState => ({ ...prevState,\n      recipe_steps: prevState.recipe_steps.map(recipe_step => {\n        if (active_step_id === recipe_step.id) {\n          return {\n            id: recipe_step.id,\n            step_detail: e.target.value\n          };\n        }\n\n        return recipe_step;\n      })\n    })); // console.log(props.formState)\n  };\n\n  const handleAddIngredientFields = () => {\n    const values = [...ingredientState];\n    values.push({\n      ingred_detail: ''\n    });\n    setIngredientState(values);\n  };\n\n  const handleRemoveIngredientFields = index => {\n    const values = [...ingredientState];\n    values.splice(index, 1);\n    setIngredientState(values);\n  };\n\n  const handleAddStepFields = () => {\n    const values = [...recipeStepState];\n    values.push({\n      step_detail: ''\n    });\n    setRecipeStepState(values);\n  };\n\n  const handleRemoveStepFields = index => {\n    const values = [...recipeStepState];\n    values.splice(index, 1);\n    setRecipeStepState(values);\n  };\n\n  const handleRecipeUpdate = e => {\n    e.preventDefault();\n    props.handleUpdate(state);\n    setEditRecipeForm(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, editRecipeForm ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"edit-form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"Edit Recipe\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleRecipeUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, \"Title:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    onChange: changeHandler,\n    value: state.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 25\n    }\n  }, \"Ingredients:\"), state.ingredients.map((ingredient, index) => /*#__PURE__*/React.createElement(Fragment, {\n    key: `${ingredient}~${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"ingred_detail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 37\n    }\n  }, \"Ingredient\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\" // className=\"form-control\"\n    ,\n    id: \"ingred_detail\",\n    name: \"ingred_detail\",\n    value: ingredient.ingred_detail,\n    onChange: e => handleIngredientChange(index, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, \"Directions:\"), state.recipe_steps.map((recipe_step, index) => /*#__PURE__*/React.createElement(Fragment, {\n    key: `${recipe_step}~${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"recipe_step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 37\n    }\n  }, \"Step\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"recipe_step\",\n    name: \"recipe_step\",\n    value: recipe_step.step_detail,\n    onChange: e => handleRecipeStepChange(index, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    buttons: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: displayFormHandler,\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, \"Cancel\")) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: displayFormHandler,\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://res.cloudinary.com/hsk23/image/upload/v1597717386/Food%20Feed/edit-new-icon-22_if53kc.png\",\n    width: \"10%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/hannahkofkin/Development/code/mod-5-project/front-end/src/components/Recipe-Detail-Page/EditRecipe.js"],"names":["React","useState","useEffect","Fragment","EditRecipe","props","editRecipeForm","setEditRecipeForm","state","setState","title","ingredients","id","ingred_detail","recipe_steps","step_detail","ingredientState","setIngredientState","recipeStepState","setRecipeStepState","recipeObj","displayFormHandler","prevState","changeHandler","e","persist","target","name","value","changeHandlerFiles","files","handleIngredientChange","index","active_ingred_id","values","map","ingredient","handleRecipeStepChange","active_step_id","recipe_step","handleAddIngredientFields","push","handleRemoveIngredientFields","splice","handleAddStepFields","handleRemoveStepFields","handleRecipeUpdate","preventDefault","handleUpdate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\n\nexport default function EditRecipe(props) {\n    // console.log(props)\n    const [editRecipeForm, setEditRecipeForm] = useState(false);\n    const [state, setState] = useState({\n        title: \"\",\n        ingredients: [{id: '', ingred_detail: ''}],\n        recipe_steps: [{id: '', step_detail: ''}]\n      });\n\n    const [ingredientState, setIngredientState] = useState([\n        {id: '', ingred_detail: ''}\n    ])\n\n    const [recipeStepState, setRecipeStepState] = useState([\n        {id: '', step_detail: ''}\n    ])\n    \n    \n    useEffect(() => {\n    // console.log(props.recipeObj)\n    if(props.recipeObj){\n        setState({\n            // image: props.recipeObj.image,\n            // video: props.recipeObj.video,\n            title: props.recipeObj.title,\n            ingredients: props.recipeObj.ingredients,\n            recipe_steps: props.recipeObj.recipe_steps,\n        })\n    }\n    },[])\n    // console.log(state)\n\n    const displayFormHandler = () => {\n        setEditRecipeForm((prevState) => {\n            return !prevState;\n        });\n    };\n\n    const changeHandler = (e) => {\n        e.persist();\n        setState((prevState) => ({\n          ...prevState,\n          [e.target.name]: e.target.value,\n        }));\n        // console.log(state);\n    };\n\n    const changeHandlerFiles = (e) => {\n        e.persist();\n        setState((prevState) => ({\n          ...prevState,\n          [e.target.name]: e.target.files[0],\n        }));\n        // console.log(state);\n    };\n\n    const handleIngredientChange = (index, e) => {\n        e.persist();\n        let active_ingred_id = state.ingredients[index].id\n        const values = [...ingredientState]\n        values[index].id = active_ingred_id\n        values[index].ingred_detail = e.target.value\n        setIngredientState(values)\n\n        setState((prevState) => ({\n            ...prevState,\n            ingredients: prevState.ingredients.map(ingredient => {\n                if(active_ingred_id === ingredient.id){\n                  return {id: ingredient.id, ingred_detail: e.target.value}\n                }\n                return ingredient\n            })\n        }));\n    }\n\n    const handleRecipeStepChange = (index, e) => {\n        e.persist();\n        let active_step_id = state.recipe_steps[index].id\n        const values = [...recipeStepState]\n        values[index].id = active_step_id\n        values[index].step_detail = e.target.value\n        setRecipeStepState(values)\n        setState((prevState) => ({\n            ...prevState,\n            recipe_steps: prevState.recipe_steps.map(recipe_step => {\n                if(active_step_id === recipe_step.id){\n                  return {id: recipe_step.id, step_detail: e.target.value}\n                }\n                return recipe_step\n            })\n        }));\n        // console.log(props.formState)\n    }\n\n    const handleAddIngredientFields = () => {\n        const values = [...ingredientState]\n        values.push({ingred_detail: ''})\n        setIngredientState(values)\n    }\n\n    const handleRemoveIngredientFields = (index) => {\n        const values = [...ingredientState]\n        values.splice(index, 1)\n        setIngredientState(values)\n    }\n\n    const handleAddStepFields = () => {\n        const values = [...recipeStepState]\n        values.push({step_detail: ''})\n        setRecipeStepState(values)\n    }\n\n    const handleRemoveStepFields = (index) => {\n        const values = [...recipeStepState]\n        values.splice(index, 1)\n        setRecipeStepState(values)\n    }\n\n    const handleRecipeUpdate = (e) => {\n        e.preventDefault()\n        props.handleUpdate(state)\n        setEditRecipeForm(false);\n    };\n\n    return (\n        <>\n            {editRecipeForm ? (\n                <div className=\"modal\">\n                    <h1 id=\"edit-form-title\">Edit Recipe</h1>\n                    <form onSubmit={handleRecipeUpdate}>\n                        {/* <label>Image Upload:</label>\n                        <input type=\"file\" name=\"image\" onChange={changeHandlerFiles} value={state.image}/>\n                        <br/>\n                        <label>Video Upload</label>\n                        <input type=\"file\" name=\"video\" onChange={changeHandlerFiles} value={state.video}/>\n                        <br/> */}\n                        <label>Title:</label>\n                        <input type=\"text\" name=\"title\" onChange={changeHandler} value={state.title}/>\n                        <br/>\n                        <label>Ingredients:</label>\n                        {state.ingredients.map((ingredient, index) => (\n                            <Fragment key={`${ingredient}~${index}`}>\n                                <div>\n                                    <label htmlFor=\"ingred_detail\">Ingredient</label>\n                                    <input\n                                        type=\"text\"\n                                        // className=\"form-control\"\n                                        id={\"ingred_detail\"}\n                                        name=\"ingred_detail\"\n                                        value={ingredient.ingred_detail}\n                                        onChange={e => handleIngredientChange(index, e)}\n                                    />\n                                </div>\n                                {/* <div>\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => handleRemoveIngredientFields(index)}\n                                    >\n                                        -\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => handleAddIngredientFields()}\n                                    >\n                                        +\n                                    </button>\n                                </div> */}\n                            </Fragment>\n                        ))}\n                        {/* <input type=\"textarea\" name=\"ingredients\" onChange={changeHandler} value={state.ingred_list}/> */}\n                        <br/>\n                        <label>Directions:</label>\n                        {state.recipe_steps.map((recipe_step, index) => (\n                            <Fragment key={`${recipe_step}~${index}`}>\n                                <div>\n                                    <label htmlFor=\"recipe_step\">Step</label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"recipe_step\"\n                                        name=\"recipe_step\"\n                                        value={recipe_step.step_detail}\n                                        onChange={e => handleRecipeStepChange(index, e)}\n                                    />\n                                </div>\n                                {/* <div>\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => handleRemoveStepFields(index)}\n                                    >\n                                        -\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => handleAddStepFields()}\n                                    >\n                                        +\n                                    </button>\n                                </div> */}\n                            </Fragment>\n                        ))}\n                        {/* <input type=\"textarea\" name=\"recipe_steps\" onChange={changeHandler} value={state.description}/> */}\n                        <br/>\n                        <input type=\"submit\" buttons/>\n                    </form>\n                    <button\n                        onClick={displayFormHandler}\n                        className=\"buttons\"\n                    >\n                        Cancel\n                    </button>\n                </div>\n                ) : (\n                <button\n                    onClick={displayFormHandler}\n                    className=\"buttons\"\n                >\n                    <img src=\"https://res.cloudinary.com/hsk23/image/upload/v1597717386/Food%20Feed/edit-new-icon-22_if53kc.png\" width=\"10%\"/>\n                </button>\n            )}\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}