{"ast":null,"code":"var _jsxFileName = \"/Users/hannahkofkin/Development/code/mod-5-project/front-end/src/components/Recipe-Detail-Page/CommentContainer.js\";\nimport React, { useEffect, useState } from 'react';\nimport Comment from './Comment';\nimport AddComment from './AddComment';\nimport './RecipeDetail.css';\nexport default function CommentContainer(props) {\n  const [state, setState] = useState([]); // const [commentForm, setCommentForm] = useState();\n  // const [commentId, setCommentId] = useState(\"\");\n  // console.log(state)\n\n  const current_recipe_id = props.recipe.id;\n  const [formState, setFormState] = useState({\n    recipe_id: current_recipe_id,\n    content: \"\"\n  });\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    fetch('http://localhost:3000/comments', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`,\n        \"Accept\": \"application/json\"\n      }\n    }).then(r => r.json()).then(comments => {\n      setState(comments);\n      console.log(comments);\n    });\n  }, []);\n\n  const renderComments = () => {\n    if (state.length > 0) {\n      return state.map(comment => {\n        {\n          comment.recipe_id === current_recipe_id && /*#__PURE__*/React.createElement(Comment, {\n            comment: comment,\n            key: comment.id,\n            user: props.user,\n            handleUpdate: handleUpdate,\n            handleDelete: handleDelete,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }\n          });\n        }\n      });\n    } else {\n      return \"Be the first one to comment!\";\n    }\n  };\n\n  const handleDelete = id => {\n    const token = localStorage.getItem(\"token\");\n    fetch(`http://localhost:3000/comments/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(r => r.json()).then(deletedComment => {\n      console.log(deletedComment);\n      console.log(state);\n      const updatedComments = state.filter(comment => comment.id !== deletedComment.id);\n      setState(updatedComments);\n    });\n  };\n\n  const handleUpdate = () => {\n    console.log(formState);\n    const token = localStorage.getItem(\"token\");\n    fetch(\"http://localhost:3000/comments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`,\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(formState)\n    }).then(r => r.json()).then(newComment => {\n      console.log(newComment); // props.setState((prevState => [...prevState, ]))\n      // debugger\n\n      setState(prevState => ({ ...prevState,\n        comments: [...props.recipe.comments, newComment]\n      }));\n    });\n    setFormState({\n      recipe_id: current_recipe_id,\n      content: \"\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"comment-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Comments:\"), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"comments-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, state.comments && renderComments()), /*#__PURE__*/React.createElement(AddComment, {\n    formState: formState,\n    setFormState: setFormState,\n    recipe: props.recipe,\n    renderNewComment: setState,\n    handleUpdate: handleUpdate,\n    handleDelete: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/hannahkofkin/Development/code/mod-5-project/front-end/src/components/Recipe-Detail-Page/CommentContainer.js"],"names":["React","useEffect","useState","Comment","AddComment","CommentContainer","props","state","setState","current_recipe_id","recipe","id","formState","setFormState","recipe_id","content","token","localStorage","getItem","fetch","method","headers","then","r","json","comments","console","log","renderComments","length","map","comment","user","handleUpdate","handleDelete","deletedComment","updatedComments","filter","body","JSON","stringify","newComment","prevState"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Comment from './Comment'\nimport AddComment from './AddComment'\nimport './RecipeDetail.css'\n\nexport default function CommentContainer(props) {\n    const [state, setState] = useState([]);\n    // const [commentForm, setCommentForm] = useState();\n    // const [commentId, setCommentId] = useState(\"\");\n    // console.log(state)\n    const current_recipe_id = props.recipe.id\n\n    const [formState, setFormState] = useState({\n        recipe_id: current_recipe_id,\n        content: \"\"\n    });\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"token\")\n        fetch('http://localhost:3000/comments', {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`,\n                \"Accept\": \"application/json\"\n            }\n        })\n            .then(r => r.json())\n            .then(comments => {\n                setState(comments)\n                console.log(comments)\n            });\n    }, []);\n\n    const renderComments = () => {\n        if (state.length > 0) {\n            return state.map(comment => {\n                {comment.recipe_id === current_recipe_id && (\n                    <Comment\n                        comment={comment}\n                        key={comment.id}\n                        user={props.user}\n                        handleUpdate={handleUpdate}\n                        handleDelete={handleDelete}\n                    />\n                )}\n            })\n        } else {\n            return \"Be the first one to comment!\"\n        }\n    }\n\n    const handleDelete = (id) => {\n        const token = localStorage.getItem(\"token\")\n        fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\",\n          headers: {\n              \"Authorization\": `Bearer ${token}`,\n          }\n        })\n          .then((r) => r.json())\n          .then(deletedComment => {\n            console.log(deletedComment)\n            console.log(state)\n            const updatedComments = state.filter(comment => comment.id !== deletedComment.id)\n            setState(updatedComments)\n          })\n    }\n\n    const handleUpdate = () => {\n        console.log(formState)\n        const token = localStorage.getItem(\"token\")\n        fetch(\"http://localhost:3000/comments\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`,\n            \"Accept\": \"application/json\",\n        },\n        body: JSON.stringify(formState),\n        })\n        .then((r) => r.json())\n        .then((newComment) => {\n            console.log(newComment);\n            // props.setState((prevState => [...prevState, ]))\n            // debugger\n            setState((prevState) => ({\n                ...prevState,\n                comments: [...props.recipe.comments, newComment]\n            }))\n        })\n        setFormState({recipe_id: current_recipe_id, content: \"\"})\n    }\n\n    return (\n        <div className=\"comment-container\">\n            <p className=\"comment-title\">Comments:</p>\n            {/* <hr/> */}\n            <section id=\"comments-list\">\n                {state.comments && renderComments()}\n            </section>\n            <AddComment \n                formState={formState}\n                setFormState={setFormState}\n                recipe={props.recipe}\n                renderNewComment={setState}\n                handleUpdate={handleUpdate}\n                handleDelete={handleDelete}\n            />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}